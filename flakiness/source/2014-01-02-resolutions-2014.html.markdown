---
title: Resolutions 2014 - Unparalyze Passion
date: 2014-01-02 03:48 UTC
tags: life
---

I'm figuring out my 2014 resolutions.

First one is to *write this blog at least once a month*, once a week as a stretch goal.
Writing will help me to do other things: It makes what I did (and thought) public, forces me to beware my own behavior so that I have something to write regularly.

Another is to *have [30 day challenges](http://www.ted.com/talks/matt_cutts_try_something_new_for_30_days.html) for every month*. As a stretch, have "books of the month" as well. I have long list of technologies to learn, bulk of projects to start and stack of books to read. I didn't do any of them though, and just had spent days. I feel bad about that but I don't want to recklessly commit one of them without having confidence with the idea. Instead, I want to try each and see if it fits. Having 30-day challenges will support such a small-start, experimental-minded execution.

Hopefully these two resolutions will complement each other. I can do a challenge and write about it. I can write about my interest then try it. 
Through the monthly challenges, I want to boot myself up. I've been stale for the last few years.

## Poisoned by Stale Self

For years, I feel I have been paralyzed by the obsession that I should learn up-to-date technology. People have told me that I should learn iOS, Android, AWS, Big Data and so on to stay relevant.

For me as a dated C++ programmer, this is very true. I felt myself being outdated, aged and irrelevant. I was upset about that and tried to catch up somehow, but I've been failing.

I think I failed because there was no immediate demand for me to push myself in that way. Nothing motivates me - My personal interest was elsewhere, and was my day job.

I've been working on an aged codebase that is related to Web tech and is written in C++. It is barely related to "modern" technologies which are all about mobile and cloud. Learning these new things doesn't help my work, at least directly. It's rather for longer term, speculative bet. Some people can invest themselves for such goals. I cannot however.

In theory it should be fine to have this kind of divergence between trend and indivisual state. After all, I love my job and it is going well. But in reality, I felt being discouraged. I strongly felt it. Each time I saw people talking about some modernish thing, I got down. I felt I was doing something rusty and irrelevant.

In this way, the divergence, or the isolation, of my personal interest from the industry trend, have hurt me. I've been feeling myself wrong and incompetent. It even killed my passion to programming. How can man keep loving something which one is inept at?

## Being Stubborn rather than Dying

The concern of my obsolescence will be real. As I mentioned though, I see more serious threats; Declining passion and polluting inertia. I have to address it first, try to start acting, shuffle myself up, for taking my passion, curiosity and confidence back.

Once I recover some momentum, it might become possible to fight against the original problem. But the scene isn't in my sight. It's too dark. I need fuel to light a lantern. That's what my 2014 resolutions are for. Through the year, I'd play with things that excite me, regardless of if it's hot or not. I won't care if a technology is in demand. I'll just follow my appetite.

The consequence isn't clear, especially because I'm no longer young and my energy to play is limited - It might go nowhere, but it is fine. At least my programming muscle and learning lung should be improved a bit, that is the base of everything else.

OK, this comes so long. Now I got encouraged by myself. Let's talk about the first step.

## First challenge - Write Go code every day.

Why [Go](http://golang.org/)? No particular reason. It looks cool, and it can be my C++ replacement in server programming. Another candidate was playing with [Rust](http://www.rust-lang.org/). But I picked Go for this time as Rust doesn't seem ready yet. I leave it for another challenge. 

I know Java is the dominant programming language for distributed programming where Go shines. So why not Java? Because Java isn't new for me thus doesn't excite me. Go is much younger and is niche, but already made some notable successes like [Docker](https://www.docker.io/) and [etcd](https://github.com/coreos/etcd). It's thrilling. My outsider's impression is that it can be Ruby for backend servers. I'd like to see how it actually is.

Having said that, I won't write any real server at this time. As a beginner, I'll play like so.
I'll build [a toy CLI tool](https://github.com/omo/fuga).

Talking about the stretch part, my "book of the month" is [Accounting Made Simple](http://www.amazon.com/Accounting-Made-Simple-Explained-Pages-ebook/dp/B004JHYTDE/).
I'm thinking about refreshing my personal financial management and wodering if accounting makes good foundation for that. It is pretty short book so I'll finish it shortly.
